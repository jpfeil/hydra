#!/usr/bin/env python2.7
import argparse
import datetime
import logging
import math
import os
import pandas as pd
import subprocess
import sys
import textwrap
import re

from library.analysis import EnrichmentAnalysis
from library.filter import filter, filter_gene_sets
from library.fit import apply_multivariate_model
from library.predict import predict
from library.notebook import enrichment_notebook
from library.utils import mkdir_p, \
                          get_genesets, \
                          get_test_genesets, \
                          read_genesets, \
                          find_aliases

date = str(datetime.date.today())
src = os.path.dirname(os.path.abspath(__file__))


def convert_size(size_bytes):
    """
    https://stackoverflow.com/questions/5194057/better-way-to-convert-file-sizes-in-python
    
    :param size_bytes: 
    :return: 
    """
    if size_bytes == 0:
        return "0B"

    size_name = ("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB")
    i = int(math.floor(math.log(size_bytes, 1024)))
    p = math.pow(1024, i)
    s = round(size_bytes / p, 2)
    return "%s %s" % (s, size_name[i])


def gene_set_clustering(matrx, genesets, args):
    """
    Iterate over the gene sets and select for multimodally expressed genes

    :param genesets:
    :param args:
    :param covariate:
    :return:
    """
    for gs, genes in filter_gene_sets(matrx, genesets, args):
        gs = re.sub('[^\w\d-]', '_', gs)

        # Make directory for output
        gsdir = os.path.join(args.output_dir, 'MultivariateAnalysis', gs)
        mkdir_p(gsdir)

        # Create training data for the model fit
        training = matrx.reindex(genes)

        # Save the expression data for future analysis
        pth = os.path.join(gsdir, 'training-data.tsv')
        training.to_csv(pth, sep='\t')

        apply_multivariate_model(training, args, gsdir, name=gs)


def enrichment_analysis(matrx, args):
    """
    Runs unsuperivsed enrichment analysis. Will run the multimodal filter
    unless a path to the multimodal output directory is provided.

    :param args:
    :return:
    """
    logger = logging.getLogger('root')
    if args.mm_path is None:
        filter(matrx, args)
        mm_genes = os.path.join(args.output_dir, 'MultiModalGenes')

    elif os.path.exists(args.mm_path):
        mm_genes = args.mm_path

    else:
        raise ValueError('Could not identify multimodally expressed genes for enrichment analysis')

    post = EnrichmentAnalysis(mm_genes,
                              args.expression,
                              min_prob_filter=args.min_prob_filter,
                              min_effect_filter=args.min_effect_filter,
                              gmt_path=args.gmt)

    output = os.path.join(args.output_dir, 'EnrichmentAnalysis', date)
    mkdir_p(output)

    terms = post.get_enriched_terms()
    if terms.shape[0] == 0:
        logger.info("No enriched terms were found!\n"
                    "Try decreasing the min-prob-filter parameter.\n"
                    "Repeat enrichment analysis using jupyter notebook")
        return

    else:
        pth = os.path.join(output, 'EnrichedTerms')
        terms.to_csv(pth, sep='\t')

    training = matrx.reindex(post.get_enriched_term_genes())
    pth = os.path.join(output, 'training-data.tsv')
    training.to_csv(pth, sep='\t')
    apply_multivariate_model(training, args, output, src)


def sweep(matrx, args):
    """
    Applies multivariate clustering of multimodally expressed genes across
    input gene set database. Use regex to select specific gene sets.

    :param args (argparse.Namespace):
    :return:
    """
    logger = logging.getLogger('root')
    # Determine which gene sets are included.
    if args.test:
        logger.info("Loading debug gene sets...")
        sets, _ = get_test_genesets(src)
        genesets = read_genesets(sets)
        args.gmt = 'TEST'

    elif args.gmt:
        genesets = get_genesets(args.gmt, args.gmt_regex)

        if len(genesets) == 0:
            raise ValueError("Need to specify gene sets for analysis.")

    else:
        logger.warn("No gene set database given.")
        genesets = {'ALL_GENES': set(matrx.index.values)}

    # Find overlap in alias space
    pth = os.path.join(src, 'data/alias-mapper.gz')
    alias_mapper = pd.read_csv(pth, sep='\t')
    logger.info("Looking for gene aliases...")
    genesets = find_aliases(genesets, alias_mapper, matrx.index)

    logger.info("Starting gene set clustering analysis:\n%s" % args.gmt)
    gene_set_clustering(matrx, genesets, args)


def enrich(matrx, args):
    """

    :param args:
    :return:
    """
    logger = logging.getLogger('root')
    if args.gmt is not None:
        logger.info("Starting unsupervised enrichment analysis:\n%s" % args.gmt)
        enrichment_analysis(matrx, args)

    elif args.gmt is None and args.go_enrichment:
        logger.info("Starting unsupervised enrichment analysis using clusterProfiler GO analysis")
        args.gmt = "GO"
        enrichment_analysis(matrx, args)

    else:
        raise ValueError("Either specify a GMT file or use the --go-enrichment flag!")


def run_notebook():

    sys.path.append(src)

    logger = logging.getLogger('root')

    regex = re.compile('token=(?P<token>\w*)')

    cmd = ['jupyter',
           'notebook',
           '--allow-root',
           '--ip', '0.0.0.0',
           '--no-browser']

    found = False

    try:
        logger.info("Starting Jupyter Notebook")
        logger.info('Ctrl-C to stop session...')
        p = subprocess.Popen(cmd,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             universal_newlines=True)

        for stderr_line in iter(p.stderr.readline, ""):
            m = regex.search(stderr_line)

            if m and not found:
                logger.info("TOKEN: %s" % m.group('token'))
                found = True

        p.stderr.close()
        return_code = p.wait()
        if return_code:
            raise subprocess.CalledProcessError(return_code, cmd)

    except KeyboardInterrupt:
        logger.info('\nClosing Jupyter Notebook')


def main():
    """
    Hydra pipeline for identifying multimodally expressed genes. Takes an expression
    matrix and outputs differentially expressed gene sets or identifies enrichment
    of gene sets for further analysis.
    """
    parser = argparse.ArgumentParser(description=main.__doc__,
                                     formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('mode',
                        help=textwrap.dedent("""
                        filter - applied multimodal filter
                        enrich - performs unsupervised enrichment analysis
                        sweep - performs within gene set clustering
                        predict - takes a model and returns assignments for new data
                        notebook - spins up jupyter notebook"""))

    parser.add_argument('-e', '--expression',
                        help='Gene symbol by sample matrix.\nDo not center the data.',
                        required=False)

    parser.add_argument('--gmt',
                        help='Gene set database in GMT format.',
                        required=False)

    parser.add_argument('-m', '--multimodal',
                        dest='mm_path',
                        help='Path to MultiModalGenes directory',
                        required=False)

    parser.add_argument('-f', '--fit',
                        dest='fit_path',
                        help='Path to model fit directory for predict method',
                        required=False)

    parser.add_argument('-s', '--scan',
                        help='Scans minimum probability component values for enrich method',
                        nargs='+')

    parser.add_argument('--go-enrichment',
                        help='Performs GO enrichment analysis using gene set database',
                        dest='go_enrichment',
                        action='store_true',
                        required=False)

    parser.add_argument('--all-genes',
                        help='Uses all multimodal genes in expression matrix',
                        dest='all_genes',
                        default=False,
                        action='store_true')

    parser.add_argument('--min-mean-filter',
                        dest='min_mean_filter',
                        help='Removes genes with an average expression below value.'
                             'Used in gene-wise clustering step.',
                        type=float,
                        default=1.0)

    parser.add_argument('--min-prob-filter',
                        dest='min_prob_filter',
                        help='Removes genes with a minor component less than value. '
                             'Used in gene-wise clustering step.',
                        type=float,
                        default=0.05)

    parser.add_argument('--min-gene-filter',
                        dest='min_num_filter',
                        help='Skips gene sets with fewer than X multimodal genes.',
                        type=int,
                        default=5)

    parser.add_argument('--min-effect-filter',
                        dest='min_effect_filter',
                        help='Removes genes with a minimum effect less than value.',
                        type=float,
                        default=0.05)

    parser.add_argument('-K',
                        help='Number of clusters to start with for multivariate clustering',
                        type=int,
                        default=5)

    parser.add_argument('--gamma',
                        help='Prior for dirichlet dispersion parameter gamma.',
                        type=float,
                        default=5.0)

    parser.add_argument('--sF',
                        help='Prior for diagonal of covariance matrix.',
                        type=float,
                        default=2.0)

    parser.add_argument('--num-laps',
                        dest='num_laps',
                        help='Number of laps for VB algorithm.',
                        type=int,
                        default=1000)

    parser.add_argument('--max-fit-time',
                        dest='max_fit_time',
                        help='Maximum number of seconds for multivariate fit before timeout',
                        type=int,
                        default=900)

    parser.add_argument('--sensitive',
                        help='Runs univariate filter in sensitive mode.',
                        action='store_true')

    parser.add_argument('-o', '--output-dir',
                        dest='output_dir',
                        default='hydra-out')

    parser.add_argument('--CPU',
                        dest='CPU',
                        type=int,
                        default=1)

    parser.add_argument('--overwrite',
                        help='Overwrite previous model',
                        action='store_true',
                        default=False)

    parser.add_argument('--test',
                        action='store_true')

    parser.add_argument('--debug',
                        action='store_true')

    parser.add_argument('--gmt-regex',
                        dest='gmt_regex',
                        help='Regex for subsetting gmt file',
                        required=False)

    args = parser.parse_args()

    # Set up logger
    level = logging.INFO
    if args.debug:
        level = logging.DEBUG

    # Make the output directory if it doesn't already exist
    mkdir_p(args.output_dir)

    logging.basicConfig(filename=os.path.join(args.output_dir, 'hydra.log'),
                        level=level)
    logging.getLogger().addHandler(logging.StreamHandler())

    logger = logging.getLogger('root')

    # Spin up notebook
    if args.mode == 'notebook':
        run_notebook()
        return

    logger.info("Started Hydra v%s" % __version__)
    logger.info("Parameters:")
    for key, value in vars(args).items():
        logger.info('\t%s: %s' % (key, value))

    if args.min_mean_filter is not None:
        logger.info("Minimum gene expression mean: %0.2f" % args.min_mean_filter)

    if args.min_prob_filter is not None:
        assert args.min_prob_filter < 1.0, 'Probability filter must be expressed as a decimal!'
        logger.info("Minimum component probability: %0.2f" % args.min_prob_filter)

    if args.expression is None:
        raise ValueError('Path to expression file is required! (-e)')

    # Read in expression data
    logger.info("Reading in expression data:\n%s" % args.expression)

    matrx = pd.read_csv(args.expression,
                        sep='\t',
                        index_col=0)

    # Remove Nans
    logger.info("Removing NaNs")
    matrx = matrx.dropna()

    # Remove duplicates in index
    logger.info("Removing duplicate genes:")
    logger.info("Number of genes: %d" % matrx.shape[0])
    matrx = matrx[~matrx.index.duplicated(keep='first')]
    logger.info("Number of genes after removing duplicates: %d" % matrx.shape[0])

    drop_genes = set()
    for gene in matrx.index:
        if '/' in gene:
            logger.info("Gene names cannot contain forward slashes! %s" % gene)
            drop_genes.add(gene)

        if "'" in gene or "\"" in gene:
            logger.info("Gene names cannot contain quotation marks! %s" % gene)
            drop_genes.add(gene)

        if pd.isnull(gene):
            drop_genes.add(gene)

    matrx = matrx.drop(list(drop_genes), axis=0)
    logger.info("Number of genes after "
                "removing misformatted genes: %d" % matrx.shape[0])

    if args.mode == 'predict':
        predict(matrx, args)

    elif args.mode == 'filter':
        filter(matrx, args)

    elif args.mode == 'sweep':
        sweep(matrx, args)

    elif args.mode == 'enrich':
        enrich(matrx, args)
        enrichment_notebook(args.expression,
                            args.output_dir)


if __name__ == '__main__':
    __version__ = "0.3.3"
    main()
